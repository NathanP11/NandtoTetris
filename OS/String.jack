// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int length;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		let str = Array.new(maxLength);
		let length = 0;

		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		
		let str[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let length = length - 1;
		let str[length] = 0;
		
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int val,counter,d;
		var char c;
		var boolean myBool;
		
		while( myBool ){
			let c = charAt(counter);
			
			if( (c < 48) | (c > 59) ){
				return val;
			}
			
			let d = (c - 48);
			let val = val * 10 + d;
			
			let counter = counter + 1;
			
			if( counter = length ){
				let myBool = false;
			}
			
		}
		
		return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int i) {
		var int a,b,c,d,e,counter;
		var char cA,cB,cC,cD,cE;
		var boolean myBool;
		
		let myBool = true;
		while (myBool) {
			if( ~(length = 0) ){
				do eraseLastChar();
			}
			else{
				let myBool = false;
			}
		}
		
		let a = i/10;
		let a = i - (i*10);
		
		let b = i/100;
		let b = (i - ( i*100 ) - a) / 10;
		
		let c = i/1000;
		let c = (i - ( i*1000 ) - a - b) / 100;
		
		let d = i/10000;
		let d = (i - ( i*10000 ) - a - b - c) / 1000;
		
		let e = i/10000;
		
		//left off here - write code to assign char value & printChar
		
		let myBool = true;
		while(myBool){
			if( a = counter ){let cA = (counter + 48);	}
			if( b = counter ){let cB = (counter + 48);	}
			if( c = counter ){let cC = (counter + 48);	}
			if( d = counter ){let cD = (counter + 48);	}
			if( e = counter ){let cE = (counter + 48);	}
			let counter = (counter + 1);
			if( counter = 10 ){	let myBool = false; 	}
		}
		
		
		
		if(e = 0){ 
			if(d = 0){ 
				if(c = 0){ 
					if(b = 0){ 
						do appendChar(cA);
					} 
					else{
						do appendChar(cA);
						do appendChar(cB);
					}
				} 
				else{
					do appendChar(cC);
					do appendChar(cB);
					do appendChar(cA);
				}
			} 
			else{
				do appendChar(cD);
				do appendChar(cC);
				do appendChar(cB);
				do appendChar(cA);
			}
		} 
		else{ 
			do appendChar(cE);
			do appendChar(cD);
			do appendChar(cC);
			do appendChar(cB);
			do appendChar(cA);
		}
		
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
